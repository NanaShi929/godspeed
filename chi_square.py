# -*- coding: utf-8 -*-
"""Chi-Square.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EipEReTC-F86mmtosp76goS-To7_69LC
"""

# importing packages
import scipy.stats as stats
import numpy as np

# no of hours a student studies
# in a week vs expected no of hours
observed_data = [28, 30, 20, 12, 10]
expected_data = [30, 25, 20, 15, 10]

# Scale observed data so the sum matches the sum of expected data
scaling_factor = sum(expected_data) / sum(observed_data)
scaled_observed_data = [x * scaling_factor for x in observed_data]

# Chi-Square Goodness of Fit Test
chi_square_test_statistic, p_value = stats.chisquare(
    scaled_observed_data, expected_data)

# chi square test statistic and p value
print('chi_square_test_statistic is : ' +
      str(chi_square_test_statistic))
print('p_value : ' + str(p_value))


# find Chi-Square critical value
print(stats.chi2.ppf(1-0.05, df=4))
alpha = 0.05  # Significance level

if p_value < alpha:
    print("Reject the null hypothesis")
else:
    print("Fail to reject the null hypothesis")

# Observed and expected values
observed = [[20, 480], [100, 1400]]
expected = [[30, 470], [90, 1410]]

# Row and column totals
row_totals = [sum(row) for row in observed]
col_totals = [sum(col) for col in zip(*observed)]
grand_total = sum(row_totals)

# Print table header
print(f"{'treatment':<12} {'fever':<8} {'expected-value':<17} {'no-fever':<10} {'expected-value':<17} {'total':<6}")
print("-" * 80)

# Print each row
treatments = ["qunine", "no-qunine"]
for i in range(2):
    print(f"{treatments[i]:<12} "
          f"{observed[i][0]:<8} {expected[i][0]:<17} "
          f"{observed[i][1]:<10} {expected[i][1]:<17} "
          f"{row_totals[i]:<6}")

# Print totals row
print("-" * 80)
print(f"{'total':<12} "
      f"{col_totals[0]:<8} {'':<17} "
      f"{col_totals[1]:<10} {'':<17} "
      f"{grand_total:<6}")

# Compute chi-square value
chi_square = 0
for i in range(2):
    for j in range(2):
        o = observed[i][j]
        e = expected[i][j]
        chi_square += ((o - e) ** 2) / e

chi_square = round(chi_square, 2)

# Print chi-square
print("\nChi-square value:", chi_square)

# Observed values
observed = [[20, 480], [100, 1400]]

# Calculate totals
row_totals = [sum(row) for row in observed]                    # [500, 1500]
col_totals = [sum(col) for col in zip(*observed)]              # [120, 1880]
grand_total = sum(row_totals)                                  # 2000

# Calculate expected values
expected = []
for i in range(2):
    expected_row = []
    for j in range(2):
        e = (row_totals[i] * col_totals[j]) / grand_total
        expected_row.append(round(e, 2))  # Rounded for clarity
    expected.append(expected_row)

# Print table header
print(f"{'treatment':<12} {'fever':<8} {'expected-value':<17} {'no-fever':<10} {'expected-value':<17} {'total':<6}")
print("-" * 80)

# Print each row
treatments = ["qunine", "no-qunine"]
for i in range(2):
    print(f"{treatments[i]:<12} "
          f"{observed[i][0]:<8} {expected[i][0]:<17} "
          f"{observed[i][1]:<10} {expected[i][1]:<17} "
          f"{row_totals[i]:<6}")

# Print totals row
print("-" * 80)
print(f"{'total':<12} "
      f"{col_totals[0]:<8} {'':<17} "
      f"{col_totals[1]:<10} {'':<17} "
      f"{grand_total:<6}")

# Compute chi-square value
chi_square = 0
for i in range(2):
    for j in range(2):
        o = observed[i][j]
        e = expected[i][j]
        chi_square += ((o - e) ** 2) / e

chi_square = round(chi_square, 2)

# Print chi-square value
print("\nChi-square value:", chi_square)

# Observed values
observed = [[20, 35], [40, 5]]

# Calculate totals
row_totals = [sum(row) for row in observed]
col_totals = [sum(col) for col in zip(*observed)]
grand_total = sum(row_totals)

# Calculate expected values
expected = []
for i in range(2):
    expected_row = []
    for j in range(2):
        e = (row_totals[i] * col_totals[j]) / grand_total
        expected_row.append(round(e, 2))  # Rounded for clarity
    expected.append(expected_row)

# Print table header
print(f"{'':<12} {'Graduate':<8} {'expected-value':<17} {'past-graduate':<10} {'expected-value':<17} {'total':<6}")
print("-" * 80)

# Print each row
treatments = ["online", "face-to-face"]
for i in range(2):
    print(f"{treatments[i]:<12} "
          f"{observed[i][0]:<8} {expected[i][0]:<17} "
          f"{observed[i][1]:<10} {expected[i][1]:<17} "
          f"{row_totals[i]:<6}")

# Print totals row
print("-" * 80)
print(f"{'total':<12} "
      f"{col_totals[0]:<8} {'':<17} "
      f"{col_totals[1]:<10} {'':<17} "
      f"{grand_total:<6}")

# Compute chi-square value
chi_square = 0
for i in range(2):
    for j in range(2):
        o = observed[i][j]
        e = expected[i][j]
        chi_square += ((o - e) ** 2) / e

chi_square = round(chi_square, 2)

# Print chi-square value
print("\nChi-square value:", chi_square)

import pandas as pd; from scipy.stats import chi2_contingency
o=pd.DataFrame([[20,480],[100,1400]],index=['qunine','no-qunine'],columns=['Fever','No Fever'])
c,_,_,e=chi2_contingency(o)
print(round(c,2))

import numpy as np
from scipy.stats import chi2_contingency

obs = np.array([[20, 480],
                [100, 1400]])

chi2, _, _, _ = chi2_contingency(obs , correction=False)
print(round(chi2, 2))

import numpy as np
from scipy.stats import chi2_contingency

obs = np.array([[20, 35],
                [40, 5]])

chi2, p, dof, expected = chi2_contingency(obs, correction=False)
print(round(chi2, 2))  # Prints 28.45

import numpy as np
from scipy.stats import chi2_contingency

while True:
    # Ask for table size
    rows = int(input("Enter number of rows: "))
    cols = int(input("Enter number of columns: "))

    # Initialize empty table
    obs = []

    print("\nEnter observed values row by row:")

    for i in range(rows):
        row = input(f"Row {i+1} (enter {cols} space-separated values): ").split()
        if len(row) != cols:
            print("Invalid number of columns. Try again.")
            break
        obs.append([int(x) for x in row])

    obs = np.array(obs)

    # Run Chi-square test
    chi2, p, dof, expected = chi2_contingency(obs, correction=False)

    # Print results
    print("\nObserved:\n", obs)
    print("\nExpected:\n", expected.round(2))
    print(f"\nChi-square value: {round(chi2, 2)}")
    print(f"p-value: {round(p, 4)}")

    # Ask to run again
    again = input("\nDo you want to input another table? (yes/no): ").strip().lower()
    if again != "yes":
        break
2