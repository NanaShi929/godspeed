# -*- coding: utf-8 -*-
"""Assignment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TNAfK-NkccScLQPIl3r-jWj8pFC_f0dd
"""

import numpy as np

np.random.seed(42)

# -------------------------------
# 1. Conditional Probability (Card Drawing)
# -------------------------------

# Create a standard deck of 52 cards
suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace']
deck = [(rank, suit) for rank in ranks for suit in suits]

n_simulations = 100000
draws = np.random.choice(len(deck), size=n_simulations)

# Event A: card is a King
is_king = np.array([1 if deck[i][0] == 'King' else 0 for i in draws])
# Event B: card is a face card
is_face = np.array([1 if deck[i][0] in ['Jack', 'Queen', 'King'] else 0 for i in draws])

# Probabilities
P_A = np.mean(is_king)
P_B = np.mean(is_face)
P_A_given_B = np.mean(is_king[is_face == 1])

# Theoretical values
theoretical_P_A = 4 / 52
theoretical_P_B = 12 / 52
theoretical_P_A_given_B = theoretical_P_A / theoretical_P_B

# -------------------------------
# 2. Conditional Probability (Dice Rolling)
# -------------------------------

# Roll two dice
dice1 = np.random.randint(1, 7, size=n_simulations)
dice2 = np.random.randint(1, 7, size=n_simulations)

# Event A: sum is 8
is_sum8 = (dice1 + dice2) == 8
# Event B: at least one die shows 3
is_atleast3 = (dice1 == 3) | (dice2 == 3)

# Probabilities
P_A_dice = np.mean(is_sum8)
P_B_dice = np.mean(is_atleast3)
P_A_given_B_dice = np.mean(is_sum8[is_atleast3])

# Theoretical calculations
outcomes = [(i, j) for i in range(1, 7) for j in range(1, 7)]
total_outcomes = len(outcomes)
count_A = sum(1 for outcome in outcomes if sum(outcome) == 8)
count_B = sum(1 for outcome in outcomes if 3 in outcome)
count_A_and_B = sum(1 for outcome in outcomes if sum(outcome) == 8 and 3 in outcome)

theoretical_P_A_dice = count_A / total_outcomes
theoretical_P_B_dice = count_B / total_outcomes
theoretical_P_A_given_B_dice = count_A_and_B / count_B

# -------------------------------
# 3. Total Probability (Machine Fault Detection)
# -------------------------------

machines = ['A', 'B', 'C']
machine_probs = [0.3, 0.45, 0.25]
defect_rates = {'A': 0.02, 'B': 0.03, 'C': 0.04}

n_items = 10000
machine_choices = np.random.choice(machines, size=n_items, p=machine_probs)
defective = np.array([1 if np.random.rand() < defect_rates[machine] else 0 for machine in machine_choices])

# Estimate P(D)
P_D = np.mean(defective)

# Estimate P(A|D), P(B|D), P(C|D)
P_A_given_D = np.mean(machine_choices[defective == 1] == 'A')
P_B_given_D = np.mean(machine_choices[defective == 1] == 'B')
P_C_given_D = np.mean(machine_choices[defective == 1] == 'C')

# -------------------------------
# Results Output
# -------------------------------

print("1. Conditional Probability (Card Drawing)")
print(f"P(A) = {P_A:.5f}, Theoretical P(A) = {theoretical_P_A:.5f}")
print(f"P(B) = {P_B:.5f}, Theoretical P(B) = {theoretical_P_B:.5f}")
print(f"P(A|B) = {P_A_given_B:.5f}, Theoretical P(A|B) = {theoretical_P_A_given_B:.5f}")
print("\n")

print("2. Conditional Probability (Dice Rolling)")
print(f"P(A) = {P_A_dice:.5f}, Theoretical P(A) = {theoretical_P_A_dice:.5f}")
print(f"P(B) = {P_B_dice:.5f}, Theoretical P(B) = {theoretical_P_B_dice:.5f}")
print(f"P(A|B) = {P_A_given_B_dice:.5f}, Theoretical P(A|B) = {theoretical_P_A_given_B_dice:.5f}")
print("\n")

print("3. Total Probability (Machine Fault Detection)")
print(f"P(D) = {P_D:.5f}")
print(f"P(A|D) = {P_A_given_D:.5f}")
print(f"P(B|D) = {P_B_given_D:.5f}")
print(f"P(C|D) = {P_C_given_D:.5f}")