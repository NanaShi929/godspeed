# -*- coding: utf-8 -*-
"""Assignment5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ETFQglTuoz8W8HBbYLzGv8WIOgrs3X7b
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# Parameters
mu = 50       # Mean
sigma = 10    # Standard deviation

# (a) Visualization and Theoretical Properties

# 1. Plot the PDF and CDF
x = np.linspace(mu - 4*sigma, mu + 4*sigma, 1000)
pdf = norm.pdf(x, mu, sigma)
cdf = norm.cdf(x, mu, sigma)

plt.figure(figsize=(12, 5))

# Plot PDF
plt.subplot(1, 2, 1)
plt.plot(x, pdf, label='PDF', color='blue')
plt.title('Probability Density Function')
plt.xlabel('x')
plt.ylabel('Density')
plt.legend()

# Plot CDF
plt.subplot(1, 2, 2)
plt.plot(x, cdf, label='CDF', color='green')
plt.title('Cumulative Distribution Function')
plt.xlabel('x')
plt.ylabel('Cumulative Probability')
plt.legend()

plt.tight_layout()
plt.show()

# 2. Identify and print mean, variance, and standard deviation
theoretical_mean = mu
theoretical_variance = sigma ** 2
theoretical_std = sigma

print(f"Theoretical Mean: {theoretical_mean}")
print(f"Theoretical Variance: {theoretical_variance}")
print(f"Theoretical Standard Deviation: {theoretical_std}")

# (b) Sampling and Empirical Statistics

# 1. Generate 1000 random samples
samples = np.random.normal(mu, sigma, 1000)

# 2. Plot a histogram of the samples
plt.figure(figsize=(8,5))
plt.hist(samples, bins=30, density=True, alpha=0.6, color='orange', label='Sample Histogram')
plt.plot(x, pdf, 'b--', label='Theoretical PDF')
plt.title('Histogram of Samples with Theoretical PDF')
plt.xlabel('x')
plt.ylabel('Density')
plt.legend()
plt.show()

# (c) Probability Computation

# 1. Probability between 40 and 60
prob_between_40_60 = norm.cdf(60, mu, sigma) - norm.cdf(40, mu, sigma)

# 2. Probability greater than 65
prob_greater_65 = 1 - norm.cdf(65, mu, sigma)

print(f"Probability that a value is between 40 and 60: {prob_between_40_60:.4f}")
print(f"Probability that a value is greater than 65: {prob_greater_65:.4f}")