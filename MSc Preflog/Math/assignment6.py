# -*- coding: utf-8 -*-
"""Assignment6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lfXzKGO-s2L7K0lEHGYEVpw5Vf4Q_LBj
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import poisson

# Parameters
lambda_calls = 4  # average number of calls per 10 minutes

# 1. Understanding the Scenario
print(f"Average number of calls (Î»): {lambda_calls}")

# 2. Generate a Probability Distribution Table for 0 to 10 calls
k_values = np.arange(0, 11)
poisson_probs = poisson.pmf(k_values, lambda_calls)

print("\nPoisson Probability Distribution (0 to 10 calls):")
for k, prob in zip(k_values, poisson_probs):
    print(f"Calls = {k}: Probability = {prob:.4f}")

# 3. Simulate Call Arrivals over 1000 intervals
np.random.seed(42)
simulated_calls = np.random.poisson(lambda_calls, 1000)

# Count frequency of each call count from 0 to 10
frequency_counts = np.array([np.sum(simulated_calls == k) for k in k_values])

print("\nFrequency of call counts from simulation (0 to 10 calls):")
for k, freq in zip(k_values, frequency_counts):
    print(f"Calls = {k}: Frequency = {freq}")

# Plot histogram of simulated call counts
plt.figure(figsize=(10,6))
plt.bar(k_values, frequency_counts, alpha=0.7, label='Simulated Frequency')
plt.plot(k_values, poisson_probs * 1000, 'ro-', label='Theoretical Frequency')
plt.xlabel('Number of Calls in 10 minutes')
plt.ylabel('Frequency')
plt.title('Simulated vs Theoretical Poisson Distribution')
plt.legend()
plt.grid(axis='y')
plt.show()